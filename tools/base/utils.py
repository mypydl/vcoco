from typing import Tuple, Union
from copy import deepcopy
import os.path as osp

import numpy as np
import matplotlib.pyplot as plt
from torch import Tensor
from pycocotools.coco import COCO


# 可视化
def show_mask(mask, ax, random_color=False):
    if random_color:
        color = np.concatenate([np.random.random(3), np.array([0.6])], axis=0)
    else:
        color = np.array([30/255, 144/255, 255/255, 0.6])
    h, w = mask.shape[-2:]
    mask_image = mask.reshape(h, w, 1) * color.reshape(1, 1, -1)
    ax.imshow(mask_image)
    
def show_points(coords, labels, ax, marker_size=375):
    pos_points = coords[labels==1]
    neg_points = coords[labels==0]
    ax.scatter(pos_points[:, 0], pos_points[:, 1], color='green', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)
    ax.scatter(neg_points[:, 0], neg_points[:, 1], color='red', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)   
    
def show_box(box, ax):
    x0, y0 = box[0], box[1]
    w, h = box[2] - box[0], box[3] - box[1]
    ax.add_patch(plt.Rectangle((x0, y0), w, h, edgecolor='green', facecolor=(0,0,0,0), lw=2))    

def watch_anns(coco_ins: COCO, img_id: int, ax, title: str = ''):
    anns = coco_ins.imgToAnns[img_id]
    boxes = boxes_xywh2xyxy(np.array([ann['bbox'] for ann in anns]))
    ax.set_title(title)
    ax.axis('off')
    for box in boxes:
        show_box(box, ax)


# 序列化
def _isArrayLike(obj):
    return hasattr(obj, '__iter__') and hasattr(obj, '__len__')

def _toSet(obj) -> set:
    if obj is None:
        return obj
    return set(obj) if _isArrayLike(obj) else {obj}

def _toList(obj) -> list:
    if obj is None:
        return obj
    return list(obj) if _isArrayLike(obj) else {obj}


# box格式转化
def boxes_xywh2xyxy(boxes: Union[np.ndarray, Tensor]) -> Union[np.ndarray, Tensor]:
    if isinstance(boxes, np.ndarray):
        boxes = boxes.copy()
    elif isinstance(boxes, Tensor):
        boxes = boxes.clone()
    else:
        raise TypeError(f'invalid type of boxes: {type(boxes)}')
    boxes[:, 2:] += boxes[:, :2]
    return boxes

def boxes_xyxy2xywh(boxes: Union[np.ndarray, Tensor]) -> Union[np.ndarray, Tensor]:
    if isinstance(boxes, np.ndarray):
        boxes = boxes.copy()
    elif isinstance(boxes, Tensor):
        boxes = boxes.clone()
    else:
        raise TypeError(f'invalid type of boxes: {type(boxes)}')
    boxes[:, 2:] -= boxes[:, :2]
    return boxes

def box_xywh2xyxy(box: list) -> list:
    x, y, w, h = box
    return [x, y, x+w, y+h]

def box_xyxy2xywh(box: list) -> list:
    x1, y1, x2, y2 = box
    return [x1, y1, x2-x1, y2-y1]


# 制作新的coco文件
def gen_new_coco(coco: COCO, 
                 new_anns: list = None, 
                 new_imgs: list = None, 
                #  valid_ann_ids: list = None, 
                 valid_img_ids: list = None) -> COCO:
    """制作新的coco文件

    如果new_anns存在，则不考虑valid_ann_ids；
    如果new_anns不存在，则考虑valid_ann_ids，若后者也不存在，就由imgToAnns提供。


    Args:
        coco (COCO): _description_
        new_anns (list, optional): _description_. Defaults to None.
        new_imgs (list, optional): _description_. Defaults to None.
        valid_ann_ids (list, optional): _description_. Defaults to None.
        valid_img_ids (list, optional): _description_. Defaults to None.

    Returns:
        COCO: _description_
    """
    if new_anns is not None:
        new_anns = None if len(new_anns) == 0 else _toList(new_anns)
    if new_imgs is not None:
        new_imgs = None if len(new_imgs) == 0 else _toList(new_imgs)
    # if valid_ann_ids is not None:
    #     valid_ann_ids = None if len(valid_ann_ids) == 0 else list(set(valid_img_ids))
    if valid_img_ids is not None:
        valid_img_ids = None if len(valid_img_ids) == 0 else list(set(valid_img_ids))

    # if all([new_anns is None, new_imgs is None, valid_ann_ids is None, valid_img_ids is None]):
    if all([new_anns is None, new_imgs is None, valid_img_ids is None]):
        return coco

    coco = deepcopy(coco)
    sort_key = lambda x: x['id']

    if new_anns is None:
        if valid_img_ids is None:
            coco.dataset['annotations'] = sorted(coco.dataset['annotations'], key=sort_key)
        else:
            assert isinstance(valid_img_ids[0], int), f'invalid type: {type(valid_img_ids[0])}'
            tmp = []
            for img_id in valid_img_ids:
                tmp.extend(coco.imgToAnns[img_id])
            coco.dataset['annotations'] = sorted(tmp, key=sort_key)
    else:
        coco.dataset['annotations'] = sorted(new_anns, key=sort_key)

    if new_imgs is None:
        if valid_img_ids is None:
            coco.dataset['images'] = sorted(coco.dataset['images'], key=sort_key)
        else:
            assert isinstance(valid_img_ids[0], int), f'invalid type: {type(valid_img_ids[0])}'
            coco.dataset['images'] = coco.loadImgs(sorted(valid_img_ids))
    else:
        coco.dataset['images'] = sorted(new_imgs, key=sort_key)

    coco.createIndex()
    assert len(set(coco.imgToAnns.keys()) - set(coco.imgs.keys())) == 0
    return coco


# 更新image_info
def update_img_info(coco: COCO):
    img_id_map = {}
    for info in coco.dataset['images']:
        file_name = osp.basename(info['file_name'])
        info['file_name'] = file_name
        new_img_id = int(file_name[-12:-4])
        img_id_map[info['id']] = new_img_id
        info['id'] = new_img_id

    for info in coco.dataset['annotations']:
        info['image_id'] = img_id_map[info['image_id']]

    coco.createIndex()


# 提取image_info
def extract_img_info(coco: COCO, valid_img_ids: list = list()):
    coco = deepcopy(coco)
    del coco.dataset['annotations']
    sort_key = lambda x: x['id']

    valid_img_ids = _toList(valid_img_ids)
    if valid_img_ids is None or len(valid_img_ids) == 0:
        coco.dataset['images'] = sorted(coco.dataset['images'], key=sort_key)
    else:
        coco.dataset['images'] = coco.loadImgs(sorted(valid_img_ids))

    coco.createIndex()
    return coco


# box转为int
def coco_box2int(coco: COCO):
    for ann in coco.dataset['annotations']:
        bbox = [int(i) for i in ann['bbox']]
        ann['bbox'] = bbox
        ann['area'] = int(bbox[2] * bbox[3])
    coco.createIndex()


# 排除某些图片的标注
def exclude_imgs(coco: COCO, exclude_img_ids: set = set()) -> Tuple[COCO, set]:
    exclude_img_ids = _toSet(exclude_img_ids)
    if len(exclude_img_ids) == 0:
        print('return raw coco')
        return coco

    exclude_success = set()
    valid_img_ids = set()
    for info in coco.dataset['images']:
        if info['id'] not in exclude_img_ids:
            valid_img_ids.add(info['id'])
        else:
            exclude_success.add(info['id'])
            
    new_anns = []
    for info in coco.dataset['annotations']:
        if info['image_id'] not in exclude_img_ids:
            new_anns.append(info)

    print(f'successfully exclude {len(exclude_success)}/{len(exclude_img_ids)} images')

    return gen_new_coco(coco, new_anns=new_anns, valid_img_ids=valid_img_ids), exclude_success

# 排除某些类
def exclude_cat(coco: COCO, exclude_cats: set = set()):
    exclude_cats = _toSet(exclude_cats)
    if len(exclude_cats) == 0:
        print('return raw coco')
        return coco

    valid_img_ids = set()
    new_anns = []
    for img_id, anns in coco.imgToAnns.items():
        tmp_anns = []
        for ann in anns:
            if ann['category_id'] not in exclude_cats:
                tmp_anns.append(ann)
        if len(tmp_anns) > 0:
            valid_img_ids.add(img_id)
            
    print(f'imgs: {len(coco.imgs)} -> {len(valid_img_ids)}')
    print(f'anns: {len(coco.anns)} -> {len(valid_img_ids)}')

    return gen_new_coco(coco, new_anns=new_anns, valid_img_ids=valid_img_ids)


train_exclude_img_ids = {
    2, 3, 42, 77, 86, 109, 113, 114, 146, 284, 286, 299, 310, 404, 570, 754, 762, 791, 792, 967, 983, 1005, 1110, 1203,
    1332, 1333, 1366, 1438, 1453, 1657, 1669, 1696, 1747, 1750, 1808, 1848, 2004, 2186, 2433, 2457, 2646, 2727, 2783,
    2957, 2966, 2993, 3062, 3110, 3127, 3489, 3558, 3709, 3739, 3790, 3946, 4645, 4775, 5668, 5911, 5992, 6046, 6546,
    6575, 6701, 7085, 7701, 8418, 9003, 9506, 9751, 9784, 10409, 10910, 11179, 11181, 11316, 11480, 11539, 11729,
    11747, 11978, 12381, 12469, 12869, 12959, 13334, 13565, 13570, 14024, 14186, 15337, 15629, 15983, 16074, 16118,
    16361, 16479, 16946, 16956, 17138, 18132, 18172, 18271, 18801, 18946, 19218, 19882, 20538, 21339, 22450, 23091,
    24553, 24930, 24992, 25067, 25898, 26215, 26384, 26562, 26642, 26850, 26873, 27318, 27568, 27673, 28537, 29614,
    29707, 29763, 29794, 30022, 30100, 30306, 30590, 31904, 32144, 33352, 33683, 34396, 34571, 34836, 35026, 35399,
    35829, 36226, 37468, 38004}
test_exclude_img_ids = {
    821, 833, 1490, 1626, 1686, 1906, 2235, 3138, 3154, 3326, 4728, 5551, 6603, 6981, 9634}
train_too_many_ins_img_ids_10 = [  # > 10 ins
    62, 80, 86, 123, 179, 204, 243, 278, 335, 350, 368, 411, 428, 497, 513, 519, 523, 565, 570, 595, 608, 615, 624, 
    704, 712, 765, 821, 875, 954, 962, 966, 970, 1028, 1068, 1110, 1111, 1112, 1118, 1153, 1212, 1238, 1269, 1279, 
    1296, 1328, 1372, 1390, 1459, 1474, 1487, 1489, 1566, 1615, 1657, 1659, 1666, 1696, 1738, 1745, 1780, 1824, 1862, 
    1872, 1882, 1899, 1928, 1929, 1944, 2001, 2065, 2092, 2094, 2108, 2154, 2160, 2174, 2185, 2216, 2300, 2307, 2349, 
    2363, 2371, 2413, 2428, 2462, 2491, 2520, 2540, 2587, 2596, 2647, 2680, 2684, 2717, 2721, 2722, 2743, 2748, 2779, 
    2814, 2888, 2926, 3014, 3018, 3162, 3179, 3195, 3220, 3300, 3342, 3361, 3410, 3414, 3450, 3487, 3493, 3543, 3589, 
    3603, 3621, 3654, 3656, 3685, 3726, 3731, 3755, 3769, 3774, 3776, 3791, 3833, 3852, 3898, 3927, 3939, 3956, 3981, 
    3987, 3992, 4004, 4018, 4038, 4109, 4121, 4167, 4173, 4182, 4185, 4241, 4243, 4278, 4309, 4330, 4331, 4354, 4356, 
    4435, 4438, 4465, 4485, 4486, 4493, 4500, 4508, 4554, 4560, 4590, 4661, 4673, 4674, 4775, 4812, 4846, 4847, 4854, 
    4857, 4887, 4909, 4951, 4956, 4971, 4995, 5052, 5149, 5161, 5170, 5225, 5239, 5258, 5279, 5315, 5334, 5360, 5396, 
    5406, 5454, 5482, 5493, 5508, 5540, 5667, 5718, 5732, 5773, 5839, 5904, 5911, 5940, 6089, 6116, 6127, 6220, 6239, 
    6256, 6270, 6271, 6306, 6316, 6345, 6348, 6400, 6434, 6455, 6500, 6519, 6532, 6544, 6545, 6577, 6578, 6582, 6603, 
    6606, 6611, 6697, 6705, 6738, 6764, 6788, 6799, 6849, 6850, 6854, 6935, 6960, 6962, 6999, 7005, 7009, 7028, 7030, 
    7047, 7085, 7090, 7121, 7151, 7183, 7196, 7211, 7223, 7228, 7388, 7439, 7459, 7478, 7487, 7489, 7509, 7527, 7583, 
    7628, 7632, 7642, 7662, 7716, 7724, 7738, 7871, 7879, 7905, 7913, 7959, 7962, 8007, 8015, 8031, 8053, 8136, 8143, 
    8160, 8191, 8236, 8248, 8257, 8278, 8310, 8311, 8320, 8374, 8375, 8383, 8405, 8407, 8418, 8435, 8457, 8485, 8495, 
    8533, 8539, 8571, 8598, 8602, 8626, 8634, 8771, 8804, 8823, 8921, 8946, 8963, 9022, 9058, 9088, 9109, 9127, 9165, 
    9170, 9196, 9199, 9242, 9326, 9327, 9347, 9363, 9374, 9384, 9396, 9410, 9456, 9463, 9490, 9491, 9501, 9511, 9532, 
    9556, 9602, 9619, 9631, 9663, 9697, 9719, 9725, 9730, 9776, 9830, 9856, 9874, 9949, 9954, 10043, 10085, 10103, 
    10114, 10132, 10133, 10174, 10197, 10218, 10232, 10290, 10345, 10346, 10362, 10389, 10456, 10477, 10485, 10489, 
    10537, 10695, 10723, 10805, 10826, 10830, 10862, 10885, 10887, 10945, 10977, 10992, 11013, 11053, 11054, 11059, 
    11182, 11189, 11196, 11213, 11244, 11265, 11274, 11289, 11304, 11308, 11345, 11352, 11396, 11406, 11464, 11519, 
    11530, 11556, 11611, 11614, 11645, 11647, 11657, 11676, 11699, 11763, 11771, 11832, 11856, 11857, 11858, 11862, 
    11887, 11960, 11968, 11973, 12079, 12144, 12266, 12271, 12283, 12303, 12311, 12348, 12372, 12406, 12407, 12415, 
    12469, 12505, 12517, 12526, 12609, 12610, 12626, 12696, 12740, 12744, 12757, 12777, 12791, 12845, 12850, 12859, 
    12862, 12873, 12923, 12959, 13017, 13021, 13120, 13122, 13174, 13234, 13266, 13292, 13300, 13356, 13360, 13403, 
    13430, 13506, 13516, 13605, 13708, 13738, 13764, 13780, 13787, 13798, 13917, 13957, 13969, 13975, 13984, 13993, 
    14002, 14004, 14019, 14043, 14063, 14086, 14140, 14145, 14164, 14242, 14258, 14301, 14385, 14416, 14417, 14447, 
    14529, 14562, 14563, 14598, 14631, 14729, 14765, 14793, 14802, 14920, 14985, 15009, 15058, 15076, 15132, 15208, 
    15258, 15299, 15319, 15322, 15332, 15399, 15431, 15530, 15545, 15547, 15620, 15661, 15668, 15680, 15708, 15711, 
    15718, 15733, 15734, 15800, 15840, 15862, 15880, 15961, 15970, 16002, 16021, 16024, 16055, 16126, 16130, 16152, 
    16179, 16249, 16257, 16274, 16281, 16348, 16378, 16379, 16394, 16429, 16471, 16504, 16516, 16529, 16555, 16577, 
    16712, 16728, 16746, 16778, 16800, 16808, 16846, 16876, 16938, 16950, 16987, 17029, 17043, 17064, 17079, 17086, 
    17098, 17141, 17180, 17189, 17191, 17195, 17204, 17213, 17216, 17248, 17264, 17340, 17373, 17396, 17410, 17415, 
    17460, 17470, 17520, 17564, 17585, 17628, 17658, 17676, 17702, 17718, 17754, 17756, 17826, 17880, 17881, 17887, 
    17936, 17952, 17977, 18012, 18037, 18042, 18064, 18068, 18100, 18102, 18119, 18132, 18218, 18223, 18252, 18260, 
    18273, 18383, 18385, 18398, 18418, 18422, 18435, 18446, 18451, 18497, 18527, 18541, 18557, 18564, 18612, 18647, 
    18650, 18655, 18705, 18738, 18763, 18897, 18915, 18937, 18984, 18988, 19001, 19089, 19112, 19116, 19117, 19138, 
    19188, 19198, 19216, 19221, 19344, 19349, 19388, 19424, 19443, 19461, 19519, 19555, 19556, 19580, 19643, 19771, 
    19822, 19850, 19885, 19900, 19958, 20009, 20028, 20085, 20201, 20202, 20279, 20333, 20361, 20384, 20405, 20406, 
    20470, 20521, 20533, 20629, 20651, 20657, 20739, 20744, 20792, 20829, 20848, 20909, 20927, 20938, 20963, 20981, 
    21045, 21110, 21137, 21154, 21167, 21223, 21314, 21363, 21370, 21375, 21409, 21411, 21484, 21489, 21573, 21604, 
    21618, 21629, 21659, 21699, 21701, 21724, 21738, 21745, 21758, 21761, 21769, 21809, 21813, 21845, 21867, 21898, 
    21919, 21941, 22045, 22126, 22166, 22186, 22202, 22209, 22228, 22284, 22307, 22309, 22323, 22326, 22329, 22333, 
    22386, 22389, 22412, 22441, 22457, 22458, 22470, 22480, 22484, 22488, 22500, 22559, 22578, 22589, 22599, 22643, 
    22712, 22746, 22747, 22794, 22797, 22863, 22864, 22880, 22896, 22945, 23002, 23004, 23040, 23065, 23163, 23164, 
    23177, 23195, 23201, 23209, 23210, 23249, 23264, 23271, 23360, 23404, 23406, 23502, 23551, 23557, 23573, 23585, 
    23630, 23650, 23679, 23704, 23719, 23729, 23745, 23747, 23813, 23856, 23869, 23871, 23878, 23889, 23890, 23905, 
    23974, 23984, 23995, 24021, 24024, 24035, 24041, 24065, 24097, 24113, 24142, 24198, 24205, 24234, 24288, 24377, 
    24450, 24468, 24506, 24541, 24546, 24561, 24623, 24624, 24627, 24635, 24655, 24672, 24689, 24781, 24828, 24851, 
    24852, 24857, 24862, 24880, 24890, 24982, 24988, 24992, 25067, 25157, 25164, 25168, 25198, 25200, 25223, 25226, 
    25264, 25289, 25325, 25362, 25367, 25411, 25414, 25419, 25471, 25528, 25600, 25610, 25629, 25648, 25654, 25685, 
    25699, 25711, 25734, 25780, 25800, 25835, 25849, 25855, 25895, 25952, 26027, 26033, 26091, 26215, 26254, 26262, 
    26284, 26351, 26387, 26397, 26450, 26495, 26509, 26511, 26522, 26606, 26657, 26715, 26733, 26739, 26756, 26799, 
    26825, 26879, 26907, 26927, 26974, 26986, 27013, 27022, 27043, 27054, 27062, 27098, 27161, 27243, 27245, 27272, 
    27287, 27394, 27406, 27429, 27431, 27432, 27458, 27475, 27534, 27568, 27569, 27576, 27585, 27617, 27673, 27681, 
    27685, 27728, 27753, 27764, 27788, 27823, 27929, 27980, 27995, 28025, 28030, 28037, 28069, 28084, 28115, 28229, 
    28241, 28463, 28559, 28674, 28734, 28784, 28806, 28812, 28813, 28820, 28876, 28885, 28896, 29006, 29017, 29079, 
    29102, 29113, 29136, 29192, 29201, 29224, 29248, 29255, 29269, 29307, 29334, 29371, 29381, 29412, 29500, 29501, 
    29521, 29525, 29530, 29533, 29571, 29645, 29702, 29711, 29725, 29796, 29818, 29849, 29857, 29858, 29924, 29944, 
    29962, 29975, 29998, 30014, 30017, 30022, 30044, 30095, 30138, 30189, 30196, 30247, 30287, 30297, 30322, 30343, 
    30352, 30360, 30367, 30414, 30430, 30440, 30444, 30447, 30462, 30487, 30497, 30564, 30588, 30590, 30592, 30607, 
    30629, 30634, 30681, 30717, 30729, 30782, 30852, 30859, 30874, 30926, 30954, 31016, 31073, 31074, 31115, 31164, 
    31174, 31177, 31201, 31202, 31205, 31234, 31355, 31384, 31411, 31495, 31530, 31586, 31613, 31633, 31725, 31738, 
    31765, 31772, 31778, 31781, 31802, 31843, 31873, 31887, 31900, 31910, 31949, 31959, 31968, 31988, 32077, 32132, 
    32142, 32144, 32159, 32197, 32233, 32247, 32284, 32319, 32356, 32365, 32426, 32430, 32455, 32483, 32571, 32576, 
    32580, 32606, 32649, 32661, 32692, 32702, 32727, 32792, 32804, 32828, 32833, 32845, 32912, 32924, 32926, 32935, 
    32952, 32979, 33034, 33036, 33063, 33076, 33078, 33154, 33170, 33185, 33211, 33228, 33234, 33280, 33305, 33313, 
    33386, 33427, 33429, 33464, 33479, 33505, 33512, 33513, 33519, 33528, 33540, 33544, 33570, 33572, 33580, 33602, 
    33639, 33721, 33760, 33779, 33795, 33818, 33822, 33830, 33836, 33897, 33913, 33917, 33983, 33987, 34003, 34073, 
    34077, 34115, 34138, 34156, 34157, 34158, 34194, 34211, 34220, 34239, 34260, 34261, 34266, 34274, 34280, 34286, 
    34291, 34309, 34326, 34351, 34354, 34376, 34396, 34434, 34457, 34485, 34514, 34526, 34535, 34541, 34552, 34563, 
    34595, 34597, 34624, 34693, 34753, 34772, 34796, 34876, 34906, 34925, 35007, 35021, 35029, 35047, 35055, 35061, 
    35083, 35089, 35090, 35102, 35112, 35124, 35208, 35211, 35219, 35234, 35302, 35328, 35359, 35371, 35392, 35436, 
    35559, 35569, 35608, 35638, 35697, 35706, 35709, 35767, 35778, 35780, 35792, 35800, 35810, 35833, 35840, 35859, 
    35880, 35926, 35982, 36016, 36022, 36045, 36064, 36075, 36083, 36104, 36115, 36118, 36123, 36126, 36134, 36138, 
    36140, 36141, 36142, 36153, 36155, 36156, 36159, 36162, 36165, 36167, 36172, 36175, 36176, 36190, 36191, 36200, 
    36220, 36222, 36223, 36224, 36225, 36226, 36327, 36335, 36470, 36526, 36657, 36667, 36766, 36803, 36809, 36841, 
    36843, 36844, 36846, 36847, 36869, 36949, 36966, 36969, 36972, 36980, 37017, 37032, 37057, 37061, 37063, 37105, 
    37125, 37150, 37165, 37188, 37197, 37205, 37215, 37277, 37310, 37329, 37335, 37396, 37422, 37428, 37528, 37539, 
    37560, 37561, 37562, 37569, 37581, 37583, 37611, 37704, 37776, 37785, 37793, 37886, 37980, 37981, 37986, 37991, 
    37992, 37995, 37996, 37997, 38012, 38072, 38080, 38099, 38101, 
]
train_too_many_ins_img_ids_15 = [  # > 15 ins
    62, 86, 123, 204, 278, 350, 411, 428, 519, 570, 595, 608, 765, 821, 966, 970, 1028, 1068, 1212, 1238, 1269, 1279, 
    1328, 1487, 1566, 1657, 1696, 2001, 2065, 2092, 2094, 2160, 2307, 2371, 2413, 2428, 2462, 2587, 2596, 2680, 2779, 
    3014, 3018, 3220, 3342, 3361, 3410, 3450, 3543, 3603, 3621, 3656, 3726, 3731, 3755, 3791, 3833, 3927, 3981, 3992, 
    4018, 4121, 4241, 4309, 4330, 4354, 4356, 4435, 4485, 4486, 4493, 4554, 4560, 4590, 4673, 4854, 4857, 4971, 4995, 
    5052, 5149, 5161, 5279, 5315, 5396, 5482, 5493, 5540, 5718, 5904, 5911, 6116, 6239, 6316, 6348, 6455, 6500, 6578, 
    6582, 6606, 6611, 6697, 6738, 6849, 6962, 7009, 7047, 7090, 7183, 7196, 7228, 7487, 7509, 7527, 7632, 7642, 7724, 
    7879, 7913, 7962, 8007, 8015, 8143, 8310, 8320, 8374, 8375, 8383, 8418, 8457, 8533, 8602, 8634, 8771, 8804, 8921, 
    8946, 8963, 9022, 9058, 9109, 9127, 9165, 9170, 9196, 9327, 9347, 9363, 9374, 9410, 9456, 9463, 9501, 9532, 9619, 
    9631, 9663, 9725, 9776, 9949, 10085, 10197, 10232, 10346, 10362, 10389, 10456, 10695, 10805, 10826, 10885, 10977, 
    10992, 11182, 11244, 11265, 11289, 11304, 11308, 11406, 11530, 11611, 11614, 11676, 11699, 11763, 11771, 11857, 
    11960, 11973, 12079, 12283, 12372, 12407, 12517, 12526, 12696, 12850, 12862, 12873, 12959, 13017, 13266, 13292, 
    13300, 13356, 13506, 13516, 13708, 13738, 13780, 13917, 13969, 13993, 14002, 14004, 14019, 14086, 14145, 14164, 
    14242, 14447, 14802, 14985, 15009, 15058, 15299, 15332, 15399, 15530, 15547, 15620, 15711, 15718, 15733, 15734, 
    15800, 15840, 15862, 15961, 15970, 16002, 16021, 16055, 16126, 16152, 16257, 16274, 16281, 16348, 16379, 16516, 
    16712, 16728, 16746, 16800, 16846, 16938, 16950, 16987, 17043, 17064, 17086, 17141, 17213, 17264, 17340, 17373, 
    17564, 17585, 17658, 17702, 17756, 17887, 17936, 18119, 18132, 18223, 18252, 18260, 18273, 18385, 18418, 18435, 
    18451, 18497, 18527, 18541, 18564, 18612, 18647, 18650, 18705, 18763, 19138, 19188, 19221, 19461, 19555, 19580, 
    19771, 19822, 19850, 19885, 20085, 20202, 20279, 20333, 20361, 20406, 20521, 20629, 20657, 20927, 20938, 20963, 
    21154, 21363, 21370, 21375, 21484, 21629, 21659, 21699, 21745, 21758, 21769, 21845, 21941, 22126, 22166, 22307, 
    22323, 22329, 22333, 22386, 22389, 22457, 22470, 22480, 22500, 22559, 22578, 22589, 22599, 22712, 22797, 22863, 
    22896, 23004, 23040, 23271, 23360, 23502, 23551, 23557, 23573, 23585, 23704, 23729, 23813, 23856, 23878, 23889, 
    23905, 23974, 23995, 24021, 24035, 24065, 24113, 24142, 24234, 24288, 24377, 24546, 24655, 24689, 24828, 24851, 
    24852, 24890, 24982, 25067, 25157, 25164, 25168, 25200, 25223, 25325, 25362, 25528, 25648, 25699, 25711, 25734, 
    25780, 25800, 25952, 26027, 26033, 26091, 26215, 26511, 26522, 26606, 26733, 26756, 26799, 26974, 27043, 27054, 
    27062, 27161, 27243, 27245, 27272, 27287, 27406, 27429, 27431, 27475, 27576, 27585, 27617, 27673, 27681, 27728, 
    27753, 27764, 27788, 27995, 28084, 28115, 28229, 28463, 28784, 28813, 28820, 28876, 29102, 29136, 29192, 29201, 
    29224, 29255, 29307, 29371, 29530, 29533, 29571, 29702, 29711, 29849, 29924, 29944, 29962, 29975, 30014, 30044, 
    30095, 30189, 30360, 30367, 30430, 30444, 30447, 30462, 30487, 30497, 30564, 30590, 30634, 30782, 30859, 30874, 
    31177, 31205, 31355, 31411, 31738, 31772, 31778, 31781, 31843, 31900, 31910, 31949, 31988, 32142, 32144, 32159, 
    32197, 32233, 32356, 32483, 32576, 32580, 32606, 32649, 32692, 32804, 32952, 32979, 33154, 33211, 33228, 33305, 
    33313, 33479, 33513, 33519, 33572, 33580, 33721, 33760, 33779, 33818, 33836, 34156, 34158, 34194, 34211, 34220, 
    34261, 34280, 34286, 34291, 34309, 34457, 34485, 34514, 34552, 34595, 34624, 34772, 34876, 35021, 35047, 35090, 
    35124, 35208, 35211, 35219, 35328, 35392, 35436, 35697, 35706, 35767, 35778, 35780, 35792, 35833, 35840, 35859, 
    36045, 36064, 36075, 36083, 36104, 36118, 36126, 36138, 36140, 36141, 36153, 36155, 36156, 36159, 36162, 36165, 
    36172, 36176, 36190, 36220, 36222, 36223, 36224, 36225, 36226, 36327, 36470, 36526, 36766, 36809, 36841, 36843, 
    36844, 36949, 36966, 36969, 37017, 37032, 37063, 37150, 37188, 37205, 37215, 37396, 37528, 37561, 37562, 37785, 
    37886, 37986, 37991, 37992, 37997, 38012, 38080, 38101, 
]
test_too_many_ins_img_ids_10 = [
    26, 31, 75, 105, 120, 157, 168, 172, 182, 223, 260, 322, 360, 382, 415, 473, 479, 486, 497, 505, 542, 560, 563, 
    582, 614, 627, 677, 713, 720, 872, 873, 891, 914, 916, 943, 950, 1031, 1035, 1077, 1137, 1194, 1196, 1256, 1261, 
    1269, 1283, 1286, 1303, 1365, 1386, 1402, 1412, 1464, 1474, 1486, 1489, 1542, 1551, 1671, 1680, 1700, 1748, 1750, 
    1755, 1758, 1818, 1839, 1884, 1933, 1977, 1996, 2037, 2064, 2072, 2077, 2081, 2121, 2219, 2319, 2322, 2324, 2395, 
    2441, 2471, 2492, 2609, 2612, 2627, 2632, 2655, 2667, 2670, 2705, 2720, 2784, 2787, 2802, 2866, 2907, 2919, 2940, 
    2968, 2990, 2998, 3009, 3029, 3038, 3056, 3091, 3096, 3126, 3127, 3136, 3215, 3218, 3237, 3240, 3269, 3292, 3319, 
    3340, 3431, 3440, 3474, 3485, 3536, 3543, 3632, 3640, 3670, 3730, 3771, 3815, 3819, 3848, 3875, 3935, 3961, 3989, 
    4021, 4038, 4102, 4125, 4139, 4158, 4197, 4252, 4271, 4272, 4310, 4311, 4391, 4406, 4435, 4469, 4533, 4563, 4608, 
    4615, 4659, 4666, 4719, 4840, 4843, 4847, 4882, 4978, 4982, 4988, 5014, 5038, 5113, 5186, 5196, 5205, 5208, 5210, 
    5237, 5248, 5275, 5313, 5340, 5344, 5346, 5386, 5413, 5431, 5478, 5483, 5486, 5501, 5561, 5612, 5613, 5669, 5676, 
    5703, 5712, 5724, 5730, 5741, 5743, 5751, 5761, 5786, 5800, 5802, 5829, 5865, 5879, 5889, 5911, 6037, 6047, 6069, 
    6085, 6170, 6183, 6258, 6267, 6274, 6284, 6298, 6327, 6354, 6410, 6435, 6441, 6471, 6475, 6477, 6480, 6509, 6531, 
    6589, 6622, 6680, 6700, 6725, 6797, 6816, 6825, 6919, 6920, 6934, 6941, 6955, 6956, 7011, 7036, 7046, 7049, 7051, 
    7094, 7132, 7140, 7141, 7150, 7174, 7194, 7205, 7251, 7266, 7312, 7340, 7407, 7411, 7421, 7466, 7518, 7542, 7604, 
    7616, 7636, 7661, 7665, 7669, 7671, 7693, 7749, 7757, 7770, 7823, 7858, 7860, 7916, 7954, 7957, 7989, 8000, 8019, 
    8204, 8208, 8213, 8220, 8225, 8233, 8282, 8317, 8351, 8371, 8388, 8390, 8427, 8464, 8471, 8504, 8569, 8602, 8624, 
    8650, 8694, 8734, 8760, 8791, 8824, 8833, 8839, 8848, 8876, 8880, 8898, 8936, 8969, 8982, 8989, 9021, 9025, 9036, 
    9057, 9088, 9094, 9100, 9105, 9107, 9118, 9120, 9124, 9137, 9193, 9195, 9207, 9236, 9281, 9299, 9311, 9316, 9352, 
    9382, 9386, 9400, 9440, 9465, 9466, 9467, 9468, 9470, 9507, 9594, 9603, 9650, 
]


# 合并coco标注
def merge_coco(coco1: COCO, coco2: COCO, rebuild_ann_id: bool):
    # NOTE image_id 必须要和文件名对应
    update_img_info(coco1)
    update_img_info(coco2)

    new_imgs = deepcopy(coco1.imgs)
    new_imgs.update(deepcopy(coco2.imgs))
    new_imgs = list(new_imgs.values())

    new_anns = deepcopy(coco1.imgToAnns)
    new_anns.update(deepcopy(coco2.imgToAnns))
    tmp = []
    # ann_id 可选重新排序
    if rebuild_ann_id:
        for img_id in sorted(new_anns.keys()):
            anns = new_anns[img_id]
            cur = len(tmp)
            for i, ann in enumerate(anns):
                ann['id'] = cur + i
            tmp.extend(anns)
    else:
        for anns in new_anns.values():
            tmp.extend(anns)
    new_anns = tmp
    
    return gen_new_coco(coco1, new_anns, new_imgs)






